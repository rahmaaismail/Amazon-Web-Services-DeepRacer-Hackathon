import math
 
def reward_function(params):
 
    # Read input parameters
    track_width = params['track_width']
    distance_from_center = params['distance_from_center']
    all_wheels_on_track = params['all_wheels_on_track']
    abs_steering = abs(params['steering_angle'])
    speed = params.get('speed', 0.0)  # Default speed to 0 if not provided
    waypoints = params.get('waypoints', [])
    closest_waypoints = params.get('closest_waypoints', [])
    heading = params.get('heading', 0.0)
   
    # Give a very low reward by default
    reward = 1e-3
   
    # Reward for staying on track (all four wheels)
    if all_wheels_on_track:
        reward = 1.0  # Base reward
       
        # Calculate 3 markers that are at varying distances away from the center line (Based on the track width)
        marker_1 = 0.1 * track_width # Close to the center line
        marker_2 = 0.25 * track_width # Moderate distance from center
        marker_3 = 0.5 * track_width # Near the track edge
 
        # Give higher reward if the car is closer to center line and vice versa
        if distance_from_center <= marker_1:
            reward += 1.0  # Highest reward for being close to the center
        elif distance_from_center <= marker_2:
            reward += 0.5  # Medium reward for moderate distance
        elif distance_from_center <= marker_3:
            reward += 0.1  # Lowest reward for being close to the edge
 
        # Calculate curvature by estimating the angle between waypoints to adjust behaviour
        if len(waypoints) > 2 and closest_waypoints:
            # Get the previous, current, and next waypoints
            prev_point = waypoints[closest_waypoints[0]]
            next_point = waypoints[closest_waypoints[1]]
            if closest_waypoints[1] + 1 < len(waypoints):
                next_next_point = waypoints[closest_waypoints[1] + 1]
            else:
                next_next_point = waypoints[0]  # Wrap around to the first waypoint if it is at the end of the track
 
            # Direction vectors for curve estimation
            vector1 = [next_point[0] - prev_point[0], next_point[1] - prev_point[1]]
            vector2 = [next_next_point[0] - next_point[0], next_next_point[1] - next_point[1]]
           
            # Calculate angle between the two vectors
            dot_product = vector1[0] * vector2[0] + vector1[1] * vector2[1]
            magnitude1 = math.sqrt(vector1[0]**2 + vector1[1]**2)
            magnitude2 = math.sqrt(vector2[0]**2 + vector2[1]**2)
            if magnitude1 * magnitude2 > 0:  #avoids division by 0
                angle = math.degrees(math.acos(dot_product / (magnitude1 * magnitude2)))
            else:
                angle = 0.0  # Treat as a straight line if magnitudes are zero
           
            # adjust speed reward based on curvature
            if angle < 10:  # Straight section of the track
                if speed >= 2.0:
                    reward += 1.0  # Rewards higher speed on straight paths
                else:
                    reward *= 0.8  # Penalize slow speed
            else:  # Curved section of the track
                if speed < 2.0:
                    reward += 1.0  # Reward slower speed on curves for better control
                else:
                    reward *= 0.5  # Penalize high speed on curves
 
        # Dynamic steering penalty 
        next_point = waypoints[closest_waypoints[1]]
        prev_point = waypoints[closest_waypoints[0]]
        track_direction = math.atan2(next_point[1] - prev_point[1], next_point[0] - prev_point[0])
        direction_diff = abs(track_direction - math.radians(heading))
        direction_diff = math.degrees(direction_diff)  # Convert to degrees 
 
        # Penalize large deviations in heading from the track direction
        if direction_diff > 10:
            reward *= 0.8  # Penalize if heading differs significantly from track direction
 
    # Penalize large steering angles to avoid zig-zag behavior
    if speed > 2.0:  # Narrow steering threshold at higher speeds
        ABS_STEERING_THRESHOLD = 10 # Max steering angle allowed at this speed
    elif speed > 1.8:
        ABS_STEERING_THRESHOLD = 12
    else:
        ABS_STEERING_THRESHOLD = 15
       
    # apply penalty for steering angles exceeding the threshold
    if abs_steering > ABS_STEERING_THRESHOLD:
        reward *= 0.8  # Apply a penalty for excessive steering 
 
   
    return float(reward) #return the calculated reward as a float
